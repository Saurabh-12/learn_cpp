Chapter Summary 

1. C++ allows you to set base class pointers and references to a derived object. 
This is useful when we want to write a function or array that can work with any type of object derived from a base class.

2. Without virtual functions, base class pointers and references to a derived class will only have access to base class member 
variables and versions of functions.

3. A virtual function is a special type of function that resolves to the most-derived version of the function (called an override) 
exists between the base and derived class.

4. To be considered an override, the derived class function must have the same signature and return type as the virtual base class
function.

5. A function that is intended to be an override should use the override specifier to ensure that it is actually an override.

6. If you intend to use virtual functions, you should make your destructor virtual, 
so the proper destructor is called if a pointer to the base class is deleted.

7. You can ignore virtual resolution by using the scope resolution operator to directly specifying which classes version 
of the function you want: e.g. base.Base::getName()

8. Early binding occurs when the compiler encounters a direct function call. 
The compiler or linker can resolve these function calls directly.

9.  Late binding occurs when a function pointer is called. 
In these cases, which function will be called can not be resolved until runtime.

10. Virtual functions use late binding and a virtual table to determine which version of the function to call.

11. Using virtual functions has a cost: virtual functions take longer to call, and the necessity of 
the virtual table increases the size of every object containing a virtual function by one pointer.

12. A virtual function can be made pure virtual/abstract by assigning it to 0. 
A class containing a pure virtual function is called an abstract class, and can not be instantiated.

13. A class that inherits pure virtual functions must concretely define them or it will also be considered abstract. 
Pure virtual functions can have a body, but they are still considered abstract.

14. An interface class is one with no member variables and all pure virtual functions. 
These are often named starting with a capital I.

15. A virtual base class is a base class that is only included once, no matter how many times it is inherited by an object.

16.object slicing:- When a derived class is assigned to a base class object, 
the base class only receives a copy of the base portion of the derived class. 
This is called object slicing.

17. Dynamic casting can be used to convert a pointer to a base class object into a pointer to a derived class object. 
This is called downcasting. A failed conversion will return a null pointer.

18. The easiest way to overload operator<< for inherited classes is to write an overloaded operator<< for the most-base class, 
and then call a virtual member function to do the printing.


