Property                   Relationship type                 Members can belong to multiple classes                    Members existence managed by class        Directionality                       Relationship verb
Composition                 Whole/part                         NO                                                           Yes                                   Unidirectional                          Part-of
Aggregation                 Whole/part                         Yes                                                           No                                   Unidirectional                          Has-a
Association                 Otherwise unrelated                Yes                                                           NoUnidirectional                     Unidirectional or bidirectional         Uses-a

The process of building complex objects from simpler ones is called object composition. 
There are two types of object composition: composition, and aggregation.

Compositions are typically implemented via normal member variables, or by pointers where the class manages 
all the memory allocation and deallocation. If you can implement a class as a composition, 
you should implement a class as a composition.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Aggregations exists when a class has a has-a relationship with the member. 
In an aggregation relationship, the class does not manage the existence of the members. 
To qualify as an aggregation, an object and its parts must have the following relationship:

The part (member) is part of the object (class)
The part (member) can belong to more than one object (class) at a time
The part (member) does not have its existence managed by the object (class)
The part (member) does not know about the existence of the object (class)
 
Aggregations are typically implemented via pointer or reference.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Associations are a looser type of relationship, where the class uses-an otherwise unrelated object. 
To qualify as an association, an object and an associated object must have the following relationship:

The associated object (member) is otherwise unrelated to the object (class)
The associated object (member) can belong to more than one object (class) at a time
The associated object (member) does not have its existence managed by the object (class)
The associated object (member) may or may not know about the existence of the object (class)
Associations may be implemented via pointer or reference, or by a more indirect means (such as holding the index or key of the associated object).